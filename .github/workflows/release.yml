name: release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release ${{ matrix.crate }} â€“ ${{ matrix.platform }}
    runs-on: ${{ matrix.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        platform: [Linux-aarch64]
        crate: [backend, display, hash_once]
        include:
          - platform: Linux-aarch64
            runs-on: ubuntu-22.04

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu

      - name: Install SDL2 dependencies
        if: matrix.crate == 'display'
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
          sudo apt-get update -y -qq
          sudo apt-get install -y --no-install-recommends \
            libasound2-dev \
            libdbus-1-dev \
            libdrm-dev \
            libgbm-dev \
            libgl1-mesa-dev \
            libgles2-mesa-dev \
            libpulse-dev \
            libudev-dev \
            libwayland-dev \
            libx11-dev \
            libxcursor-dev \
            libxext-dev \
            libxi-dev \
            libxinerama-dev \
            libxkbcommon-dev \
            libxrandr-dev \
            libxss-dev \
            libxt-dev \
            libxxf86vm-dev \
            wayland-protocols \
            x11proto-dev

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "crates -> crates/target"

      - name: Build ${{ matrix.crate }}
        run: |
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
          export RUSTFLAGS="-C target-cpu=generic -C link-arg=-Wl,--no-as-needed"
          cargo build --locked --release --target aarch64-unknown-linux-gnu --manifest-path crates/${{ matrix.crate }}/Cargo.toml \
            ${{ matrix.crate == 'display' && '--features=sdl2/bundled' || '' }}
          cp crates/target/aarch64-unknown-linux-gnu/release/${{ matrix.crate }} ./${{ matrix.crate }}
          aarch64-linux-gnu-strip -s ./${{ matrix.crate }}
        env:
          RUST_BACKTRACE: full

      - name: Verify binary architecture
        run: |
          file ./${{ matrix.crate }}
          if ! file ./${{ matrix.crate }} | grep -q "ARM aarch64"; then
            echo "Error: Binary is not built for aarch64!"
            exit 1
          fi

      - name: Create Release for ${{ matrix.crate }}
        uses: softprops/action-gh-release@v1
        with:
          files: ./${{ matrix.crate }}
          tag_name: v${{ inputs.version }}
          generate_release_notes: true
